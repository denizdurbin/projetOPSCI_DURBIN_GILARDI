version: '3'

services:
  strapi-pg:
    image: postgres:latest
    container_name: strapi-pg
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - strapi-pg-data:/var/lib/postgresql/data
    networks:
      - strapi-network

  projet-strapi:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: projet-strapi
    restart: unless-stopped
    env_file: .env
    ports:
      - "1337:1337"
    depends_on:
      - strapi-pg
    environment:
      DATABASE_HOST: strapi-pg
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - strapi-network

  strapi-frontend:
    build:
      context: ./opsci-strapi-frontend
      dockerfile: Dockerfile
    container_name: strapi-frontend 
    ports:
      - "3000:3000"
    depends_on:
      - projet-strapi
    networks:
      - strapi-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    expose:
      - "2181"
    networks:
      - strapi-network

  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://localhost:9093,OUTSIDE://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKAJS_NO_PARTITIONER_WARNING: "1" 
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_NO_LISTENER_AUTHENTICATION_PLAINTEXT: "true"
      KAFKA_NO_LISTENER_AUTHENTICATION_SSL: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_CREATE_TOPICS: "event:1:1, product:1:1, stock:1:1, errors:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - strapi-network

  event_consumer:
    container_name: event_consumer
    build: ./event-consumer
    image: event_consumer:latest
    restart: on-failure
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      STRAPI_TOKEN: ${STRAPI_TOKEN}
      STRAPI_URL: ${STRAPI_URL}
      TOPIC: ${EVENT_TOPIC}
      BEGINNING: ${BEGINNING}
      ERROR_TOPIC: ${ERROR_TOPIC}
    depends_on:
      - kafka
      - projet-strapi
    networks:
      - strapi-network

  event_producer:
    container_name: event_producer
    build: ./event-producer
    image: event_producer:latest
    restart: on-failure
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      TOPIC: ${EVENT_TOPIC}
      FILE_NAME: ${FILE_NAME_EVENT}
      ERROR_TOPIC: ${ERROR_TOPIC}
    depends_on:
      - kafka
      - projet-strapi
    networks:
      - strapi-network

  product_consumer:
    container_name: product_consumer
    build: ./product-consumer
    image: product_consumer:latest
    restart: on-failure
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      STRAPI_URL: ${STRAPI_URL}
      STRAPI_TOKEN: ${STRAPI_TOKEN}
      TOPIC: ${PRODUCT_TOPIC}
      ERROR_TOPIC: ${ERROR_TOPIC}
    depends_on:
      - kafka
      - projet-strapi
    networks:
      - strapi-network

  product_producer:
    container_name: product_producer
    build: ./product-producer
    image: product_producer:latest
    restart: on-failure
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      TOPIC: ${PRODUCT_TOPIC}
      FILE_NAME: ${FILE_NAME_PRODUCT}
      ERROR_TOPIC: ${ERROR_TOPIC}
    depends_on:
      - kafka
      - projet-strapi
    networks:
      - strapi-network

  stock_consumer:
    container_name: stock_consumer
    build: ./stock-consumer
    image: stock_consumer:latest
    restart: on-failure
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      STRAPI_TOKEN: ${STRAPI_TOKEN}
      STRAPI_URL: ${STRAPI_URL}
      TOPIC: ${STOCK_TOPIC}
      BEGINNING: ${BEGINNING}
      ERROR_TOPIC: ${ERROR_TOPIC}
    depends_on:
      - kafka
      - projet-strapi
    networks:
      - strapi-network

  stock_producer:
    container_name: stock_producer
    build: ./stock-producer
    image: stock_producer:latest
    restart: on-failure
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      TOPIC: ${STOCK_TOPIC}
      FILE_NAME: ${FILE_NAME_STOCK}
    depends_on:
      - kafka
      - projet-strapi
    networks:
      - strapi-network

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    restart: unless-stopped
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - "1883:1883"
    expose:
      - "1883"
    networks:
      - strapi-network

  mqtt-kafka-connector:
    image: arthurescriou/mqtt-kafka-connector:1.0.0
    container_name: mqtt-kafka-connector
    restart: unless-stopped
    env_file: .env
    environment:
      BROKER_1: ${BROKER_1}
      BROKER_2: ${BROKER_2}
      BROKER_3: ${BROKER_3}
      KAFKA_TOPIC: ${STOCK_TOPIC}
      MQTT_TOPIC: ${STOCK_TOPIC}
      MQTT_ENDPOINT: ws://mosquitto:1883
    networks:
      - strapi-network


volumes:
  strapi-pg-data:

networks:
  strapi-network:
    driver: bridge